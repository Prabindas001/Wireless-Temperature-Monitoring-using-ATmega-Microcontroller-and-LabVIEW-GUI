
LM35_ATMEGA_LABVIEW_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000004a6  0000051a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000080  00000000  00000000  00000546  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000011b  00000000  00000000  000005c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b6e  00000000  00000000  000006e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004a7  00000000  00000000  0000124f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000087c  00000000  00000000  000016f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  00001f74  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000259  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004ee  00000000  00000000  000022fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f0  00000000  00000000  000027eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  7a:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <delay>:
#include<util/delay.h>
#include"lcd.h"


void delay(uint16_t count)
{
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  86:	4a ef       	ldi	r20, 0xFA	; 250
  88:	50 e0       	ldi	r21, 0x00	; 0
  8a:	05 c0       	rjmp	.+10     	; 0x96 <delay+0x14>
  8c:	fa 01       	movw	r30, r20
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <delay+0xc>
	uint16_t i;
	for(i=0;i<count;i++)
  92:	2f 5f       	subi	r18, 0xFF	; 255
  94:	3f 4f       	sbci	r19, 0xFF	; 255
  96:	28 17       	cp	r18, r24
  98:	39 07       	cpc	r19, r25
  9a:	c0 f3       	brcs	.-16     	; 0x8c <delay+0xa>
	_delay_ms(1);
}
  9c:	08 95       	ret

0000009e <main>:
void main()
{
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
	uint16_t adc_val;
	uint8_t FSR1;
	InitLCD(0);
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 14 01 	call	0x228	; 0x228 <InitLCD>
	USARTInit(51);
  ac:	83 e3       	ldi	r24, 0x33	; 51
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 b4 01 	call	0x368	; 0x368 <USARTInit>
	InitADC();
  b4:	0e 94 ae 00 	call	0x15c	; 0x15c <InitADC>
	LCDClear();
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCDByte>
	LCDWriteString("Temperature");
  c4:	80 e6       	ldi	r24, 0x60	; 96
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDWriteString>
	LCDWriteStringXY(0,1,"Monitoring Node");
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	0e 94 ab 01 	call	0x356	; 0x356 <LCDGotoXY>
  d4:	8c e6       	ldi	r24, 0x6C	; 108
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDWriteString>
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	2a ef       	ldi	r18, 0xFA	; 250
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x48>


void delay(uint16_t count)
{
	uint16_t i;
	for(i=0;i<count;i++)
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	84 31       	cpi	r24, 0x14	; 20
  ee:	91 05       	cpc	r25, r1
  f0:	c9 f7       	brne	.-14     	; 0xe4 <main+0x46>
	InitADC();
	LCDClear();
	LCDWriteString("Temperature");
	LCDWriteStringXY(0,1,"Monitoring Node");
	delay(20);
	LCDClear();
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCDByte>
	LCDWriteString("Temperature 0C");
  fe:	8c e7       	ldi	r24, 0x7C	; 124
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDWriteString>
 106:	ca ef       	ldi	r28, 0xFA	; 250
 108:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		adc_val=ReadADC(0);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 b3 00 	call	0x166	; 0x166 <ReadADC>
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	fe 01       	movw	r30, r28
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x7a>


void delay(uint16_t count)
{
	uint16_t i;
	for(i=0;i<count;i++)
 11c:	2f 5f       	subi	r18, 0xFF	; 255
 11e:	3f 4f       	sbci	r19, 0xFF	; 255
 120:	24 36       	cpi	r18, 0x64	; 100
 122:	31 05       	cpc	r19, r1
 124:	c1 f7       	brne	.-16     	; 0x116 <main+0x78>
	while(1)
	{
		adc_val=ReadADC(0);
        FSR1=adc_val/2;
		delay(100);
        USARTWriteChar(FSR1);
 126:	8c 01       	movw	r16, r24
 128:	16 95       	lsr	r17
 12a:	07 95       	ror	r16
 12c:	80 2f       	mov	r24, r16
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 bf 01 	call	0x37e	; 0x37e <USARTWriteChar>
	  	
		LCDWriteIntXY(0,1,FSR1,3);
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	0e 94 ab 01 	call	0x356	; 0x356 <LCDGotoXY>
 13c:	80 2f       	mov	r24, r16
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	63 e0       	ldi	r22, 0x03	; 3
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	0e 94 4d 01 	call	0x29a	; 0x29a <LCDWriteInt>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	fe 01       	movw	r30, r28
 14e:	31 97       	sbiw	r30, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0xb0>


void delay(uint16_t count)
{
	uint16_t i;
	for(i=0;i<count;i++)
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	84 36       	cpi	r24, 0x64	; 100
 156:	91 05       	cpc	r25, r1
 158:	c9 f7       	brne	.-14     	; 0x14c <main+0xae>
 15a:	d7 cf       	rjmp	.-82     	; 0x10a <main+0x6c>

0000015c <InitADC>:
#include<avr/io.h>

void InitADC()
{
ADMUX=(1<<REFS0);// For Aref=AVcc;
 15c:	80 e4       	ldi	r24, 0x40	; 64
 15e:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(7<<ADPS0);
 160:	87 e8       	ldi	r24, 0x87	; 135
 162:	86 b9       	out	0x06, r24	; 6
}
 164:	08 95       	ret

00000166 <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ADMUX&=0xf8;
 166:	97 b1       	in	r25, 0x07	; 7
 168:	98 7f       	andi	r25, 0xF8	; 248
 16a:	97 b9       	out	0x07, r25	; 7
	ch=ch&0b00000111;
	ADMUX|=ch;
 16c:	97 b1       	in	r25, 0x07	; 7
 16e:	87 70       	andi	r24, 0x07	; 7
 170:	89 2b       	or	r24, r25
 172:	87 b9       	out	0x07, r24	; 7
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
 174:	36 9a       	sbi	0x06, 6	; 6

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
 176:	34 9b       	sbis	0x06, 4	; 6
 178:	fe cf       	rjmp	.-4      	; 0x176 <ReadADC+0x10>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
 17a:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
 17c:	24 b1       	in	r18, 0x04	; 4
 17e:	35 b1       	in	r19, 0x05	; 5
}
 180:	c9 01       	movw	r24, r18
 182:	08 95       	ret

00000184 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 184:	84 b3       	in	r24, 0x14	; 20
 186:	80 7f       	andi	r24, 0xF0	; 240
 188:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
 18a:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
 18c:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	8a 95       	dec	r24
 192:	f1 f7       	brne	.-4      	; 0x190 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	97 9a       	sbi	0x12, 7	; 18
 198:	82 2f       	mov	r24, r18
 19a:	8a 95       	dec	r24
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 19e:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
 1a0:	82 95       	swap	r24
 1a2:	80 7f       	andi	r24, 0xF0	; 240
 1a4:	92 2f       	mov	r25, r18
 1a6:	9a 95       	dec	r25
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 1aa:	97 98       	cbi	0x12, 7	; 18
 1ac:	92 2f       	mov	r25, r18
 1ae:	9a 95       	dec	r25
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 1b2:	97 9a       	sbi	0x12, 7	; 18
 1b4:	92 2f       	mov	r25, r18
 1b6:	9a 95       	dec	r25
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 1ba:	93 b3       	in	r25, 0x13	; 19
 1bc:	92 2f       	mov	r25, r18
 1be:	9a 95       	dec	r25
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 1c2:	97 98       	cbi	0x12, 7	; 18
 1c4:	92 2f       	mov	r25, r18
 1c6:	9a 95       	dec	r25
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 1ca:	87 fd       	sbrc	r24, 7
 1cc:	e4 cf       	rjmp	.-56     	; 0x196 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 1ce:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 1d0:	84 b3       	in	r24, 0x14	; 20
 1d2:	8f 60       	ori	r24, 0x0F	; 15
 1d4:	84 bb       	out	0x14, r24	; 20

}
 1d6:	08 95       	ret

000001d8 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 1d8:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 1da:	66 23       	and	r22, r22
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <LCDByte+0xa>
	CLEAR_RS();
 1de:	96 98       	cbi	0x12, 6	; 18
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <LCDByte+0xc>
else
	SET_RS();
 1e2:	96 9a       	sbi	0x12, 6	; 18
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	82 2f       	mov	r24, r18
 1e8:	8a 95       	dec	r24
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 1ec:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 1ee:	85 b3       	in	r24, 0x15	; 21
 1f0:	93 2f       	mov	r25, r19
 1f2:	92 95       	swap	r25
 1f4:	9f 70       	andi	r25, 0x0F	; 15
 1f6:	80 7f       	andi	r24, 0xF0	; 240
 1f8:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 1fa:	95 bb       	out	0x15, r25	; 21
 1fc:	82 2f       	mov	r24, r18
 1fe:	8a 95       	dec	r24
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 202:	97 98       	cbi	0x12, 7	; 18
 204:	82 2f       	mov	r24, r18
 206:	8a 95       	dec	r24
 208:	f1 f7       	brne	.-4      	; 0x206 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 20a:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 20c:	85 b3       	in	r24, 0x15	; 21
 20e:	3f 70       	andi	r19, 0x0F	; 15
 210:	80 7f       	andi	r24, 0xF0	; 240
 212:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 214:	85 bb       	out	0x15, r24	; 21
 216:	82 2f       	mov	r24, r18
 218:	8a 95       	dec	r24
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 21c:	97 98       	cbi	0x12, 7	; 18
 21e:	2a 95       	dec	r18
 220:	f1 f7       	brne	.-4      	; 0x21e <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 222:	0e 94 c2 00 	call	0x184	; 0x184 <LCDBusyLoop>
}
 226:	08 95       	ret

00000228 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 228:	1f 93       	push	r17
 22a:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 22c:	8b e3       	ldi	r24, 0x3B	; 59
 22e:	9b e2       	ldi	r25, 0x2B	; 43
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 234:	84 b3       	in	r24, 0x14	; 20
 236:	8f 60       	ori	r24, 0x0F	; 15
 238:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 23a:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 23c:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 23e:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 240:	85 b3       	in	r24, 0x15	; 21
 242:	80 7f       	andi	r24, 0xF0	; 240
 244:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 246:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 248:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 24a:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	98 2f       	mov	r25, r24
 250:	9a 95       	dec	r25
 252:	f1 f7       	brne	.-4      	; 0x250 <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 254:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 256:	a9 9a       	sbi	0x15, 1	; 21
 258:	98 2f       	mov	r25, r24
 25a:	9a 95       	dec	r25
 25c:	f1 f7       	brne	.-4      	; 0x25a <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 25e:	97 98       	cbi	0x12, 7	; 18
 260:	8a 95       	dec	r24
 262:	f1 f7       	brne	.-4      	; 0x260 <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 264:	0e 94 c2 00 	call	0x184	; 0x184 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 268:	81 2f       	mov	r24, r17
 26a:	8c 60       	ori	r24, 0x0C	; 12
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 272:	88 e2       	ldi	r24, 0x28	; 40
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCDByte>
}
 27a:	1f 91       	pop	r17
 27c:	08 95       	ret

0000027e <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	ec 01       	movw	r28, r24
 284:	04 c0       	rjmp	.+8      	; 0x28e <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCDByte>
	msg++;
 28c:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 28e:	88 81       	ld	r24, Y
 290:	88 23       	and	r24, r24
 292:	c9 f7       	brne	.-14     	; 0x286 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 29a:	ef 92       	push	r14
 29c:	ff 92       	push	r15
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	df 93       	push	r29
 2a4:	cf 93       	push	r28
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <LCDWriteInt+0xe>
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <LCDWriteInt+0x10>
 2aa:	0f 92       	push	r0
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	9c 01       	movw	r18, r24
 2b2:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2b4:	fe 01       	movw	r30, r28
 2b6:	31 96       	adiw	r30, 0x01	; 1
 2b8:	85 e0       	ldi	r24, 0x05	; 5
 2ba:	df 01       	movw	r26, r30
 2bc:	1d 92       	st	X+, r1
 2be:	8a 95       	dec	r24
 2c0:	e9 f7       	brne	.-6      	; 0x2bc <LCDWriteInt+0x22>
 2c2:	fe 01       	movw	r30, r28
 2c4:	35 96       	adiw	r30, 0x05	; 5
 2c6:	0d c0       	rjmp	.+26     	; 0x2e2 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 2c8:	c9 01       	movw	r24, r18
 2ca:	6a e0       	ldi	r22, 0x0A	; 10
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	0e 94 2a 02 	call	0x454	; 0x454 <__divmodhi4>
 2d2:	80 83       	st	Z, r24
	val=val/10;
 2d4:	c9 01       	movw	r24, r18
 2d6:	6a e0       	ldi	r22, 0x0A	; 10
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	0e 94 2a 02 	call	0x454	; 0x454 <__divmodhi4>
 2de:	9b 01       	movw	r18, r22
 2e0:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 2e2:	21 15       	cp	r18, r1
 2e4:	31 05       	cpc	r19, r1
 2e6:	81 f7       	brne	.-32     	; 0x2c8 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 2e8:	bf ef       	ldi	r27, 0xFF	; 255
 2ea:	0f 3f       	cpi	r16, 0xFF	; 255
 2ec:	1b 07       	cpc	r17, r27
 2ee:	79 f4       	brne	.+30     	; 0x30e <LCDWriteInt+0x74>
 2f0:	20 e0       	ldi	r18, 0x00	; 0
 2f2:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 2f4:	ae 01       	movw	r20, r28
 2f6:	4f 5f       	subi	r20, 0xFF	; 255
 2f8:	5f 4f       	sbci	r21, 0xFF	; 255
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <LCDWriteInt+0x66>
 2fc:	2f 5f       	subi	r18, 0xFF	; 255
 2fe:	3f 4f       	sbci	r19, 0xFF	; 255
 300:	fa 01       	movw	r30, r20
 302:	e2 0f       	add	r30, r18
 304:	f3 1f       	adc	r31, r19
 306:	80 81       	ld	r24, Z
 308:	88 23       	and	r24, r24
 30a:	c1 f3       	breq	.-16     	; 0x2fc <LCDWriteInt+0x62>
 30c:	04 c0       	rjmp	.+8      	; 0x316 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 30e:	25 e0       	ldi	r18, 0x05	; 5
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	20 1b       	sub	r18, r16
 314:	31 0b       	sbc	r19, r17
 316:	7e 01       	movw	r14, r28
 318:	08 94       	sec
 31a:	e1 1c       	adc	r14, r1
 31c:	f1 1c       	adc	r15, r1
 31e:	e2 0e       	add	r14, r18
 320:	f3 1e       	adc	r15, r19
 322:	89 01       	movw	r16, r18
 324:	09 c0       	rjmp	.+18     	; 0x338 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 326:	f7 01       	movw	r30, r14
 328:	81 91       	ld	r24, Z+
 32a:	7f 01       	movw	r14, r30
 32c:	80 5d       	subi	r24, 0xD0	; 208
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 334:	0f 5f       	subi	r16, 0xFF	; 255
 336:	1f 4f       	sbci	r17, 0xFF	; 255
 338:	05 30       	cpi	r16, 0x05	; 5
 33a:	11 05       	cpc	r17, r1
 33c:	a4 f3       	brlt	.-24     	; 0x326 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	cf 91       	pop	r28
 34a:	df 91       	pop	r29
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	08 95       	ret

00000356 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 356:	88 32       	cpi	r24, 0x28	; 40
 358:	30 f4       	brcc	.+12     	; 0x366 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 35a:	61 11       	cpse	r22, r1
 35c:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 35e:	80 68       	ori	r24, 0x80	; 128
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCDByte>
 366:	08 95       	ret

00000368 <USARTInit>:
void USARTInit(uint16_t ubrr_value)
{

   //Set Baud rate

   UBRRL = ubrr_value;
 368:	89 b9       	out	0x09, r24	; 9
   UBRRH = (ubrr_value>>8);
 36a:	90 bd       	out	0x20, r25	; 32

   >> char size 8

   */

   UCSRC=(1<<URSEL)|(3<<UCSZ0);
 36c:	86 e8       	ldi	r24, 0x86	; 134
 36e:	80 bd       	out	0x20, r24	; 32


   //Enable The receiver and transmitter

   UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE);
 370:	88 ed       	ldi	r24, 0xD8	; 216
 372:	8a b9       	out	0x0a, r24	; 10


}
 374:	08 95       	ret

00000376 <USARTReadChar>:
//available.
char USARTReadChar()
{
   //Wait untill a data is available

   while(!(UCSRA & (1<<RXC)))
 376:	5f 9b       	sbis	0x0b, 7	; 11
 378:	fe cf       	rjmp	.-4      	; 0x376 <USARTReadChar>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR;
 37a:	8c b1       	in	r24, 0x0c	; 12
}
 37c:	08 95       	ret

0000037e <USARTWriteChar>:
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 37e:	5d 9b       	sbis	0x0b, 5	; 11
 380:	fe cf       	rjmp	.-4      	; 0x37e <USARTWriteChar>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 382:	8c b9       	out	0x0c, r24	; 12
}
 384:	08 95       	ret

00000386 <USARTWriteInt>:



void USARTWriteInt(int val,unsigned int field_length)
{
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	df 93       	push	r29
 38c:	cf 93       	push	r28
 38e:	00 d0       	rcall	.+0      	; 0x390 <USARTWriteInt+0xa>
 390:	00 d0       	rcall	.+0      	; 0x392 <USARTWriteInt+0xc>
 392:	0f 92       	push	r0
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	9c 01       	movw	r18, r24
 39a:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 39c:	fe 01       	movw	r30, r28
 39e:	31 96       	adiw	r30, 0x01	; 1
 3a0:	85 e0       	ldi	r24, 0x05	; 5
 3a2:	df 01       	movw	r26, r30
 3a4:	1d 92       	st	X+, r1
 3a6:	8a 95       	dec	r24
 3a8:	e9 f7       	brne	.-6      	; 0x3a4 <USARTWriteInt+0x1e>
 3aa:	fe 01       	movw	r30, r28
 3ac:	35 96       	adiw	r30, 0x05	; 5
 3ae:	0d c0       	rjmp	.+26     	; 0x3ca <USARTWriteInt+0x44>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 3b0:	c9 01       	movw	r24, r18
 3b2:	6a e0       	ldi	r22, 0x0A	; 10
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	0e 94 2a 02 	call	0x454	; 0x454 <__divmodhi4>
 3ba:	80 83       	st	Z, r24
	val=val/10;
 3bc:	c9 01       	movw	r24, r18
 3be:	6a e0       	ldi	r22, 0x0A	; 10
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	0e 94 2a 02 	call	0x454	; 0x454 <__divmodhi4>
 3c6:	9b 01       	movw	r18, r22
 3c8:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 3ca:	21 15       	cp	r18, r1
 3cc:	31 05       	cpc	r19, r1
 3ce:	81 f7       	brne	.-32     	; 0x3b0 <USARTWriteInt+0x2a>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 3d0:	bf ef       	ldi	r27, 0xFF	; 255
 3d2:	0f 3f       	cpi	r16, 0xFF	; 255
 3d4:	1b 07       	cpc	r17, r27
 3d6:	71 f4       	brne	.+28     	; 0x3f4 <USARTWriteInt+0x6e>
 3d8:	a0 e0       	ldi	r26, 0x00	; 0
 3da:	b0 e0       	ldi	r27, 0x00	; 0
		while(str[j]==0) j++;
 3dc:	9e 01       	movw	r18, r28
 3de:	2f 5f       	subi	r18, 0xFF	; 255
 3e0:	3f 4f       	sbci	r19, 0xFF	; 255
 3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <USARTWriteInt+0x60>
 3e4:	11 96       	adiw	r26, 0x01	; 1
 3e6:	f9 01       	movw	r30, r18
 3e8:	ea 0f       	add	r30, r26
 3ea:	fb 1f       	adc	r31, r27
 3ec:	80 81       	ld	r24, Z
 3ee:	88 23       	and	r24, r24
 3f0:	c9 f3       	breq	.-14     	; 0x3e4 <USARTWriteInt+0x5e>
 3f2:	04 c0       	rjmp	.+8      	; 0x3fc <USARTWriteInt+0x76>
	else
		j=5-field_length;
 3f4:	a5 e0       	ldi	r26, 0x05	; 5
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	a0 1b       	sub	r26, r16
 3fa:	b1 0b       	sbc	r27, r17

	if(val<0) USARTWriteChar('-');
	for(i=j;i<5;i++)
 3fc:	a5 30       	cpi	r26, 0x05	; 5
 3fe:	b1 05       	cpc	r27, r1
 400:	ac f4       	brge	.+42     	; 0x42c <USARTWriteInt+0xa6>
	{
	USARTWriteChar(48+str[i]);
 402:	ac 0f       	add	r26, r28
 404:	bd 1f       	adc	r27, r29
 406:	11 96       	adiw	r26, 0x01	; 1
 408:	8c 91       	ld	r24, X
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 40a:	5d 9b       	sbis	0x0b, 5	; 11
 40c:	fe cf       	rjmp	.-4      	; 0x40a <USARTWriteInt+0x84>
		j=5-field_length;

	if(val<0) USARTWriteChar('-');
	for(i=j;i<5;i++)
	{
	USARTWriteChar(48+str[i]);
 40e:	80 5d       	subi	r24, 0xD0	; 208
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 410:	8c b9       	out	0x0c, r24	; 12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 412:	84 ec       	ldi	r24, 0xC4	; 196
 414:	99 e0       	ldi	r25, 0x09	; 9
 416:	fc 01       	movw	r30, r24
 418:	31 97       	sbiw	r30, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <USARTWriteInt+0x92>
 41c:	fc 01       	movw	r30, r24
 41e:	31 97       	sbiw	r30, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <USARTWriteInt+0x98>
 422:	fc 01       	movw	r30, r24
 424:	31 97       	sbiw	r30, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <USARTWriteInt+0x9e>
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <USARTWriteInt+0xa2>
	//USARTWriteChar(48+str[i]);
	for(i=0;i<4;i++)
	{
	_delay_ms(10);
	}
}}
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
 436:	cf 91       	pop	r28
 438:	df 91       	pop	r29
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	08 95       	ret

00000440 <write>:

void write(char *data)
{
 440:	fc 01       	movw	r30, r24
 442:	04 c0       	rjmp	.+8      	; 0x44c <write+0xc>
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 444:	5d 9b       	sbis	0x0b, 5	; 11
 446:	fe cf       	rjmp	.-4      	; 0x444 <write+0x4>
{
	//USARTWriteChar('#');
	//USARTWriteChar(3);
	//USARTWriteChar(1);
	while(*data)
	USARTWriteChar(*data++);
 448:	31 96       	adiw	r30, 0x01	; 1
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 44a:	8c b9       	out	0x0c, r24	; 12
void write(char *data)
{
	//USARTWriteChar('#');
	//USARTWriteChar(3);
	//USARTWriteChar(1);
	while(*data)
 44c:	80 81       	ld	r24, Z
 44e:	88 23       	and	r24, r24
 450:	c9 f7       	brne	.-14     	; 0x444 <write+0x4>
	USARTWriteChar(*data++);
	//USARTWriteChar('\n');
	//USARTWriteInt(data,2);
	//while(*data) USARTWriteChar(*data++);
}
 452:	08 95       	ret

00000454 <__divmodhi4>:
 454:	97 fb       	bst	r25, 7
 456:	09 2e       	mov	r0, r25
 458:	07 26       	eor	r0, r23
 45a:	0a d0       	rcall	.+20     	; 0x470 <__divmodhi4_neg1>
 45c:	77 fd       	sbrc	r23, 7
 45e:	04 d0       	rcall	.+8      	; 0x468 <__divmodhi4_neg2>
 460:	0c d0       	rcall	.+24     	; 0x47a <__udivmodhi4>
 462:	06 d0       	rcall	.+12     	; 0x470 <__divmodhi4_neg1>
 464:	00 20       	and	r0, r0
 466:	1a f4       	brpl	.+6      	; 0x46e <__divmodhi4_exit>

00000468 <__divmodhi4_neg2>:
 468:	70 95       	com	r23
 46a:	61 95       	neg	r22
 46c:	7f 4f       	sbci	r23, 0xFF	; 255

0000046e <__divmodhi4_exit>:
 46e:	08 95       	ret

00000470 <__divmodhi4_neg1>:
 470:	f6 f7       	brtc	.-4      	; 0x46e <__divmodhi4_exit>
 472:	90 95       	com	r25
 474:	81 95       	neg	r24
 476:	9f 4f       	sbci	r25, 0xFF	; 255
 478:	08 95       	ret

0000047a <__udivmodhi4>:
 47a:	aa 1b       	sub	r26, r26
 47c:	bb 1b       	sub	r27, r27
 47e:	51 e1       	ldi	r21, 0x11	; 17
 480:	07 c0       	rjmp	.+14     	; 0x490 <__udivmodhi4_ep>

00000482 <__udivmodhi4_loop>:
 482:	aa 1f       	adc	r26, r26
 484:	bb 1f       	adc	r27, r27
 486:	a6 17       	cp	r26, r22
 488:	b7 07       	cpc	r27, r23
 48a:	10 f0       	brcs	.+4      	; 0x490 <__udivmodhi4_ep>
 48c:	a6 1b       	sub	r26, r22
 48e:	b7 0b       	sbc	r27, r23

00000490 <__udivmodhi4_ep>:
 490:	88 1f       	adc	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	5a 95       	dec	r21
 496:	a9 f7       	brne	.-22     	; 0x482 <__udivmodhi4_loop>
 498:	80 95       	com	r24
 49a:	90 95       	com	r25
 49c:	bc 01       	movw	r22, r24
 49e:	cd 01       	movw	r24, r26
 4a0:	08 95       	ret

000004a2 <_exit>:
 4a2:	f8 94       	cli

000004a4 <__stop_program>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__stop_program>
